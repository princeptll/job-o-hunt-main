function _callback(error, data) {
    if(error) throw error;
}

function start(routine, callback, error, data) {
    if(!callback)
        callback = _callback
        
    try {
        if(error)
            result = routine.throw(error);
        else
            result = routine.next(data);
        //console.log(result);
        if(!result.done) {
            result.value(function(error, data) {
                start(routine, callback, error, data);
            });
        }
        else {
            callback(null, result.value);
        }
    }
    catch(exception) {
        return callback(exception);
    }
}

function skip(message) {
    return function(callback) {
        process.nextTick(function() {
            console.log("skip -> " + message);
            callback();
        });
    };
}

function sleep(duration) {
    return function(callback) {
        setTimeout(callback, duration);
    }
}

function WaitAll() {
   routines = [];
   return {
       wait: function(routine) { routines.push(routine); },
       all: function(callback) {
           count = routines.length;
           if(count == 0) return callback();
           
           errors = [];
           datas = [];
           for(i in routines) {
               start(routines[i], function(error, data) {
                   if(error) errors.push(error);
                   if(data) datas.push(data);
                   
                   if(--count == 0) {
                       callback(
                           (errors.length > 0 ? errors : null),
                           (datas.length > 0 ? datas : undefined)
                       );
                   }
               });
           }
       }
   };
}

module.exports = {
    WaitAll:WaitAll,
    start:start,
    skip:skip,
    sleep:sleep
};
